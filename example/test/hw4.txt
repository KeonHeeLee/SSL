#include < stdio.h >
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <malloc.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <time.h>
#include <pthread.h>
#include <semaphore.h>

struct timespec start, end;

int n, p, d, buffersize;
sem_t mutex, full, empty, s;
pthread_t *tid_g;
pthread_t *tid_b;

float *a;
float *b;
float *c;

int in = -1;
int out = -1;


typedef struct {
	int first;
	int second;
} element;

element *queue;

void send(int first, int second)
{
	sem_wait(&empty);
	sem_wait(&mutex);
	queue[in].first = first;
	queue[in].second = second;
	in = (in + 1) % buffersize;
	sem_post(&full);
	sem_post(&mutex);
}

void recv(int* first, int* second)
{
	sem_wait(&full);
	sem_wait(&mutex);
	*first = queue[out].first;
	*second = queue[out].second;
	out = (out + 1) % buffersize;
	sem_post(&empty);
	sem_post(&mutex);
}

void* gaussian()
{
	int i = 0, l = 0, j = 0;
	recv(&l, &i);
	while (l != -1015)
	{
		float tmp = a[i*n + l] / a[l*n + l];
		for (j = l; j <= n - 1; j++)
		{
			a[i*n + j] = a[i*n + j] - tmp * a[l*n + j];
		}
		b[i] = b[i] - tmp * b[l];
		sem_post(&s);
		recv(&l, &i);
	}
	pthread_exit(0);
	return NULL;
}

void* backsub()
{
	int i = 0, j = 0;
	recv(&i, &j);
	while (i != -1015)
	{
		b[j] = b[j] - c[i] * a[j*n + i];
		a[j*n + i] = 0;
		sem_post(&s);
		recv(&i, &j);
	}
	pthread_exit(0);
	return NULL;
}

int main(int argc, char* argv[]){
	int adat, bdat, cdat;
	int bn, tindex;
	int i, j, l, k;

	p = atoi(argv[1]);
	buffersize = atoi(argv[2]);
	adat = open(argv[3], O_RDONLY);
	bdat = open(argv[4], O_RDONLY);
	cdat = open(argv[5], O_WRONLY | O_CREAT | O_TRUNC, 0644);

	if (adat == -1 || bdat == -1 || cdat == -1){
		printf("ERROR : Can't read file\n");
		exit(1);
	}
	tid_g = (pthread_t *)malloc(sizeof(pthread_t) * p);
	tid_b = (pthread_t *)malloc(sizeof(pthread_t) * p);
	queue = (element *)malloc(sizeof(element) * buffersize);

	read(adat, &n, sizeof(int));
	read(bdat, &bn, sizeof(int));
	if (n != bn){
		printf("ERROR!");
		exit(1);
	}
	sem_init(&mutex, 0, 1);
	sem_init(&full, 0, 0);
	sem_init(&empty, 0, 1);
	sem_init(&s, 0, 0);

	a = (float *)malloc(sizeof(float) * n * n);
	b = (float *)malloc(sizeof(float) * n);
	c = (float *)malloc(sizeof(float) * n);

	for (i = 0; i<n; i++)
	{
		for (j = 0; j<n; j++)
		{
			lseek(adat, sizeof(int) + sizeof(float) * (i*n + j), SEEK_SET);
			read(adat, &(a[i*n + j]), sizeof(float));
		}
	}

	for (i = 0; i<n; i++) {
		lseek(bdat, sizeof(int) + sizeof(float) * i, SEEK_SET);
		read(bdat, &(b[i]), sizeof(float));
	}

	clock_gettime(CLOCK_MONOTONIC, &start);

	for (i = 0; i < p; i++)
	{
		tindex = pthread_create(&tid_g[i], NULL, gaussian, 0);
		if (tindex < 0)
		{
			printf("ERROR : thread create ERROR!\n");
			exit(1);
		}
	}

	int d = n - 1;
	for (l = 0; l <= n-2; l++)
	{
		sem_init(&s, 0, 0);
		for (i = l + 1; i <= n - 1; i++)
		{
			send(l, i);
		}
		for (k = 0; k < d; k++)
			sem_wait(&s);
		d--;
	}
	for (i = 0; i < p; i++)
		send(-1015, 0);
	for (i = 0; i < p; i++)
		pthread_join(tid_g[i], NULL);


	// ------------------------------backsub

	for (i = 0; i < p; i++)
	{
		tindex = pthread_create(&tid_b[i], NULL, backsub, 0);
		if (tindex < 0)
		{
			printf("ERROR : thread create ERROR!\n");
			exit(1);
		}
	}

	d = n - 1;
	for (i = n - 1; i >= 0; i--)
	{
		sem_init(&s, 0, 0);
		c[i] = b[i] / a[i*n + i];
		for (j = 0; j <= i - 1; j++)
		{
			send(i, j);
		}
		for (k = 0; k < d; k++)
			sem_wait(&s);
		d--;
	}
	for (i = 0; i < p; i++)
		send(-1015, 0);
	for (i = 0; i < p; i++)
		pthread_join(tid_b[i], NULL);

	clock_gettime(CLOCK_MONOTONIC, &end);


	printf("���� �������� �ظ� ���ϴ�  �� �ɸ��� �ð� : %lf��\n", (double)(end.tv_sec - start.tv_sec) + (double)(end.tv_nsec - start.tv_nsec) / 1000000000);

	write(cdat, &n, sizeof(int));
	for (i = 0; i<n; i++)
	{
		write(cdat, &(c[i]), sizeof(float));
	}

	close(adat); close(bdat); close(cdat);
	free(a); free(b); free(c);
	sem_destroy(&mutex); sem_destroy(&full); sem_destroy(&empty); sem_destroy(&s);
	return 0;
}
